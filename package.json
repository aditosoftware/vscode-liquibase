{
  "name": "liquibase-integration",
  "displayName": "Liquibase",
  "description": "Execute Liquibase commands on changelogs and create liquibase.properties files",
  "license": "MIT",
  "publisher": "adito",
  "version": "1.0.2",
  "engines": {
    "vscode": "^1.84.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "keywords": [
    "Liquibase",
    "Commands",
    "CLI"
  ],
  "qna": "marketplace",
  "extensionKind": [
    "workspace"
  ],
  "icon": "media/icons/liquibase_logo.png",
  "capabilities": {
    "untrustedWorkspaces": {
      "supported": false,
      "description": "This extension needs access to the workspace folders in order to read and execute Liquibase changelogs and write configurations."
    }
  },
  "bugs": {
    "email": "vscext.devs@aditosoftware.onmicrosoft.com",
    "url": "https://github.com/aditosoftware/vscode-liquibase/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/aditosoftware/vscode-liquibase.git"
  },
  "homepage": "https://github.com/aditosoftware/vscode-liquibase/blob/main/README.md",
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "liquibase.update",
        "title": "Update...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.drop-all",
        "title": "Drop-all...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.validate",
        "title": "Validate...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.status",
        "title": "List the not deployed changesets (status)...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.diff",
        "title": "Compare two databases (diff)...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.db-doc",
        "title": "Generate database documentation (db-doc)...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.generate-changelog",
        "title": "Generate Changelog...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.unexpected-changesets",
        "title": "Unexpected Changesets...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.changelog-sync",
        "title": "Mark not deployed changelogs as executed (changelog-sync)...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.clear-checksums",
        "title": "Clear the checksums of all changelogs in the database...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.history",
        "title": "List all deployed changesets (history)...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.tag",
        "title": "Create Tag...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.tag-exists",
        "title": "Tag Exists...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.rollback",
        "title": "Rollback to Tag...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.update-sql",
        "title": "Generate SQL File for incoming changes...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.createLiquibaseConfiguration",
        "title": "Create Liquibase Configuration",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.editExistingLiquibaseConfiguration",
        "title": "Edit existing Liquibase Configuration...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.addExistingConfiguration",
        "title": "Add existing liquibase.properties to the configuration...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.removeExistingConfiguration",
        "title": "Remove existing liquibase.properties from the configuration...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.drivers",
        "title": "Drivers ...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.convertFormatFile",
        "title": "Convert a file from one liquibase format to another...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.convertFormatFolder",
        "title": "Convert a folder recursively from one liquibase format to another...",
        "category": "Liquibase"
      },
      {
        "command": "liquibase.openCacheFile",
        "title": "Open the file with the recently loaded elements",
        "category": "Liquibase: Cache"
      },
      {
        "command": "liquibase.removeFromCache",
        "title": "Remove any values from the recently loaded elements...",
        "category": "Liquibase: Cache"
      }
    ],
    "configuration": {
      "title": "Liquibase",
      "properties": {
        "liquibase.configurationPath": {
          "type": "string",
          "default": "data/liquibase",
          "markdownDescription": "Relative path inside the workspace where liquibase configuration should be stored.\nThis folder should not be included in your version control system."
        },
        "liquibase.liquibaseFolder": {
          "type": "string",
          "markdownDescription": "Relative path inside the workspace, where your liquibase changelog files are located.This location will be added the classpath of newly generated files.\n\nIf there is no path given, then the project itself will be added to classpath.\n\n**Important:** Changing this path after some configurations were created could possible invalidate those configurations. This is, because this folder will be included in classpath of the configuration and and the changelog-file gets a relative path depending on this file."
        },
        "liquibase.defaultDatabaseForConfiguration": {
          "type": "string",
          "markdownDescription": "The default selected database for creating a new configuration.",
          "enum": [
            "NO_PRE_CONFIGURED_DRIVER",
            "MariaDB",
            "MySQL",
            "MS SQL",
            "PostgreSQL",
            "Oracle"
          ],
          "enumItemLabels": [
            "no pre-configured driver"
          ],
          "default": "NO_PRE_CONFIGURED_DRIVER"
        },
        "liquibase.clearOutputChannelOnStart": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Clears the output channel on the start of each command."
        },
        "liquibase.openOutputChannelOnCommandStart": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Opens the output channel at the start of every command execution."
        }
      }
    },
    "submenus": [
      {
        "id": "liquibase.commandsMenu",
        "label": "Liquibase"
      },
      {
        "id": "liquibase.configurationMenu",
        "label": "Liquibase"
      }
    ],
    "menus": {
      "editor/title/context": [
        {
          "submenu": "liquibase.commandsMenu",
          "when": "resourceLangId == xml || resourceLangId == json || resourceLangId == yaml || resourceLangId == yml || resourceLangId == sql",
          "group": "Liquibase"
        },
        {
          "submenu": "liquibase.configurationMenu",
          "when": "resourceLangId == properties || resourceLangId == java-properties",
          "group": "Liquibase"
        }
      ],
      "explorer/context": [
        {
          "submenu": "liquibase.commandsMenu",
          "when": "resourceLangId == xml || resourceLangId == json || resourceLangId == yaml || resourceLangId == yml || resourceLangId == sql",
          "group": "Liquibase"
        },
        {
          "submenu": "liquibase.configurationMenu",
          "when": "resourceLangId == properties || resourceLangId == java-properties",
          "group": "Liquibase"
        }
      ],
      "editor/context": [
        {
          "submenu": "liquibase.commandsMenu",
          "when": "resourceLangId == xml || resourceLangId == json || resourceLangId == yaml || resourceLangId == yml || resourceLangId == sql",
          "group": "Liquibase"
        },
        {
          "submenu": "liquibase.configurationMenu",
          "when": "resourceLangId == properties || resourceLangId == java-properties",
          "group": "Liquibase"
        }
      ],
      "liquibase.commandsMenu": [
        {
          "command": "liquibase.update",
          "group": "1_CommonCommands"
        },
        {
          "command": "liquibase.validate",
          "group": "1_CommonCommands"
        },
        {
          "command": "liquibase.status",
          "group": "2_OtherCommands"
        },
        {
          "command": "liquibase.changelog-sync",
          "group": "2_OtherCommands"
        },
        {
          "command": "liquibase.rollback",
          "group": "2_OtherCommands"
        },
        {
          "command": "liquibase.db-doc",
          "group": "3_Generate"
        },
        {
          "command": "liquibase.unexpected-changesets",
          "group": "3_Generate"
        },
        {
          "command": "liquibase.update-sql",
          "group": "3_Generate"
        },
        {
          "command": "liquibase.convertFormatFile",
          "group": "3_Generate"
        }
      ],
      "liquibase.configurationMenu": [
        {
          "command": "liquibase.editExistingLiquibaseConfiguration",
          "when": "resourceLangId == properties || resourceLangId == java-properties"
        }
      ]
    },
    "walkthroughs": [
      {
        "id": "liquibaseWalkthrough",
        "title": "Get started with Liquibase",
        "description": "A short overview how to use the Liquibase extension.",
        "steps": [
          {
            "id": "createLiquibaseProperties",
            "title": "Create a Liquibase properties file",
            "description": "In order to fully use this extension, you should create a liquibase.properties file. This is used for any command and stores the connection values to your database. The graphic editor will support you.\nYou should **NOT** add this file to your version control system, because this file can contain sensitive information, such as passwords.\n[Create liquibase.properties](command:liquibase.createLiquibaseConfiguration)",
            "media": {
              "markdown": "media/walkthrough/properties.md"
            },
            "completionEvents": [
              "onCommand:liquibase.createLiquibaseConfiguration"
            ]
          },
          {
            "id": "javaHome",
            "title": "Set your JAVA_HOME",
            "media": {
              "markdown": "media/walkthrough/empty.md"
            },
            "description": "In order to execute Liquibase commands, you need to set your ``JAVA_HOME`` environment variable.\nYou can use any JDK/JRE starting from Java 13 and onwards.\nWe recommend using JDK 21."
          },
          {
            "id": "configureSetting",
            "title": "Configure your settings",
            "media": {
              "markdown": "media/walkthrough/settings.md"
            },
            "description": "Also, you should configure your settings for the extension.\nAll the settings can be found in the Liquibase section.\n[Take me to the settings](command:workbench.action.openSettings?%22liquibase.%22)"
          },
          {
            "id": "runFirstUpdate",
            "title": "Run first command",
            "description": "Now that you have created your Liquibase properties file, you can now execute any command. You could run the ``List the not deployed changesets (status)`` command to see the changes that are not already in the database.\nYou can use any Liquibase command from the command palette.\n[Run status command](command:liquibase.status)",
            "media": {
              "markdown": "media/walkthrough/empty.md"
            },
            "completionEvents": [
              "onCommand:liquibase.status"
            ]
          },
          {
            "id": "commandsToRun",
            "title": "Commands you can run",
            "description": "There is a 'Liquibase' action in the status bar in the bottom, with which you can see all commands of the extension.\nAlternatively, you can list all commands by opening the Command Palette (default shortcut Ctrl + Shift + P) and filtering for ``Liquibase``.",
            "media": {
              "image": "media/walkthrough/statusBar.png",
              "altText": "status bar item Liquibase in the bottom bar"
            },
            "completionEvents": [
              "onCommand:workbench.action.quickOpen"
            ]
          },
          {
            "id": "liquibaseOverviewActions",
            "title": "Database Overview",
            "description": "Sometimes, you want to have an overview about your whole database. For this, we have a useful command in the status bar labeled 'Overview'.\nThis will create an HTML report with a lot of useful information regarding your database and the changelogs.\nYou can see information about the current table structure, including columns and indexes.\nAlso, you can see the authors of every changeset referenced into the root changelog and any pending changes.",
            "media": {
              "image": "media/walkthrough/statusBarOverview.png",
              "altText": "status bar item Liquibase Overview as book in the bottom bar"
            },
            "completionEvents": [
              "onCommand:liquibase.db-doc"
            ]
          },
          {
            "id": "learnMoreAboutLiquibase",
            "title": "Learn more about Liquibase",
            "media": {
              "markdown": "media/walkthrough/empty.md"
            },
            "description": "Read more about Liquibase [in the official documentation](https://docs.liquibase.com/start/home.html).",
            "completionEvents": [
              "onLink:https://docs.liquibase.com/start/home.htm"
            ]
          }
        ]
      }
    ],
    "icons": {
      "liquibase-logo": {
        "description": "The Liquibase icon",
        "default": {
          "fontPath": "./assets/liquibase_icons.woff",
          "fontCharacter": "\\E001"
        }
      }
    },
    "keybindings": [
      {
        "command": "liquibase.update",
        "key": "ctrl+alt+u",
        "mac": "cmd+alt+u"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "package": "webpack --mode production --devtool hidden-source-map",
    "webpack:compile": "webpack --mode development",
    "clean": "rimraf ./out  && rimraf ./dist",
    "build:icons": "run-func out/scripts/generateFont.js generateFont",
    "compile": "tsc -p ./",
    "watch": "tsc --watch -p ./",
    "clean-compile": "npm run clean && npm run compile && npm run webpack:compile",
    "createTempWorkspace": "copyfiles -u 3 -E -a \"src/test/workspace/**/*\" out/temp/workspace",
    "lint": "eslint .",
    "lint:fix": "npm run lint -- --fix",
    "pretest": "npm run clean-compile && npm run createTempWorkspace",
    "test": "vscode-test",
    "test:e2e": "npm run pretest && extest setup-and-run --code_version max --extensions_dir ./out/e2e/extensions --code_settings ./src/test/e2e/settings.json --mocha_config .mocharc.json out/test/e2e/webview/**/*.test.js",
    "coverage": "npm run test -- --coverage --coverage-output ./coverage --coverage-reporter html --coverage-reporter text",
    "postinstall": "cd webview-ui && npm install && npm run build"
  },
  "dependencies": {
    "@aditosoftware/driver-dependencies": "^1.0.4",
    "@aditosoftware/vscode-input": "^2.0.1",
    "@aditosoftware/vscode-logging": "^1.0.3",
    "download": "^8.0.0",
    "immer": "^10.1.1",
    "properties-file": "^3.5.10"
  },
  "devDependencies": {
    "@aditosoftware/eslint-config-adito-platform": "latest",
    "@types/chai": "^4.3.19",
    "@types/chai-fs": "^2.0.5",
    "@types/chai-string": "^1.4.5",
    "@types/download": "^8.0.5",
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/sinon": "^17.0.3",
    "@types/vscode": "^1.84.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "chai": "^4.5.0",
    "chai-fs": "^2.0.0",
    "chai-string": "^1.5.0",
    "concurrently": "^9.1.0",
    "copyfiles": "^2.4.1",
    "mariadb": "^3.4.0",
    "mkdirp": "^3.0.1",
    "rimraf": "^6.0.1",
    "run-func": "^3.0.0",
    "sinon": "^19.0.2",
    "ts-loader": "^9.5.1",
    "typescript": "^5.7.2",
    "vscode-extension-tester": "^8.10.0",
    "webfont": "^11.2.26",
    "webpack": "^5.97.1",
    "webpack-cli": "^5.1.4",
    "webpack-shell-plugin-next": "^2.3.2"
  }
}